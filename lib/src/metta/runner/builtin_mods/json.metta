(@doc get-value
  (@desc "Function takes space which was generated by dict-space function as input and key atom and returns value tied to that key")
  (@params (
    (@param "Space")
    (@param "Key")))
  (@return "Value which tied with input key, empty if no such key in space"))
(: get-value (-> Grounded Atom %Undefined%))
(= (get-value $dictspace $key) (match $dictspace ($key $value) $value))

(@doc get-keys
  (@desc "Function takes space which was generated by dict-space function as input and returns all keys which this space contains")
  (@params (
    (@param "Space")))
  (@return "All keys in the input space"))
(: get-keys (-> Grounded Expression))
(= (get-keys $dictspace)
   (function
     (chain (unify $dictspace ($key $value) $key Empty) $t (return $t)) ))


(@doc dict-space
  (@desc "Function takes key-value pairs in form of expression as input, creates space and add key-value pairs into it")
  (@params (
    (@param "Expression")))
  (@return "Space"))
(: dict-space (-> Expression Grounded))
(= (dict-space $expr) (chain (eval (new-space)) $dictspace (let $res (add-reducts $dictspace $expr) $dictspace)))

(= (format-encoded-dict-inner $encoded-dict)
    (let ($head $tail) (decons-atom $encoded-dict)
        (if (== $tail ())
            (format-args {} ($head))
            (let $formatted-tail (format-encoded-dict-inner $tail)
                (format-args "{}, {}" ($head $formatted-tail))))))

(= (format-encoded-dict $encoded-dict)
    (let $formatted (format-encoded-dict-inner $encoded-dict)
        (format-args "{{ {} }}" ($formatted))))

(= (json-encode $input)
    (chain (get-type $input) $type
        (chain (get-metatype $input) $metatype
            (if (== $type Number)
                (format-args {} ($input))
                (if (== $type SpaceType)
                    (let $encoded-dict (collapse (json-encode-dict $input))
                        (let $formatted-encoded-dict (format-encoded-dict $encoded-dict)
                            (format-args "{}" ($formatted-encoded-dict))))
                    (if (== $metatype Expression)
                        (let $encoded-expr (json-encode-expr $input)
                            (format-args [{}] ($encoded-expr)))
                        (format-args '{}' ($input))))))))

(= (json-encode-dict $dict-space)
   (chain (eval (get-keys $dict-space)) $keys
     (unify Empty $keys
        (format-args {} ($dict-space))
        (let $value (get-value $dict-space $keys)
            (let $recres (json-encode $value)
                (format-args "'{}' : {}" ($keys $recres))))) ))

(= (json-encode-expr $expr)
    (let ($head $tail) (decons-atom $expr)
        (let $encode_head (json-encode $head)
            (if (== $tail ())
                (format-args "{}" ($encode_head))
                (let $encode_tail (json-encode-expr $tail)
                    (format-args "{}, {}" ($encode_head $encode_tail)))))))