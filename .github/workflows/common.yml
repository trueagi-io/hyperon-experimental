# This reusable workflow builds the project and tests it.

# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.

name: common

on:
  workflow_call:
    inputs:
      python-version:
        description: 'A version of a python interpreter to use'
        default: '3.7'
        required: false
        type: string
      os:
        description: 'A container which is used to make a build'
        default: ubuntu-20.04
        required: false
        type: string
      cmake-version:
        description: 'CMake version to use'
        default: 3.16.x
        required: false
        type: string

jobs:
  build-all:
    runs-on: ${{ inputs.os }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1.0.6
        with:
            toolchain: stable
            override: true

      - name: Build Rust library
        working-directory: ./lib
        run: |
          cargo check
          cargo build

      - name: Test Rust library
        working-directory: ./lib
        run: |
          RUST_LOG=hyperon=debug cargo test

      - name: Install cbindgen
        uses: actions-rs/cargo@v1.0.1
        with:
          command: install
          args: cbindgen

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.14.1
        with:
          cmake-version: ${{ inputs.cmake-version }}

      - name: Install Conan
        uses: turtlebrowser/get-conan@v1.2
        with:
          version: 1.60.2

      - name: Setup Conan profile
        run: |
          conan profile new --detect default

      - name: Print environment
        run: |
          echo "rustc --version"
          rustc --version
          echo "cbindgen --version"
          cbindgen --version
          echo "python --version"
          python --version
          echo "conan --version"
          conan --version
          echo "conan profile show default"
          conan profile show default
          echo "gcc --version"
          gcc --version
          echo "cmake --version"
          cmake --version
          echo "make --version"
          make --version

      - name: Setup C API build
        run: |
          mkdir -p build
          cd build
          # specify C compiler as conan could not find it automatically
          # see https://github.com/conan-io/conan/issues/4322
          cmake -DPython3_EXECUTABLE=`which python` -DCMAKE_C_COMPILER=gcc ..

      - name: Build C API
        working-directory: ./build
        run: make

      - name: Test C API
        working-directory: ./build
        run: make check
